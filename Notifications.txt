using {TargetNamespace}.Models;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace {TargetNamespace} {
    internal class Notifications {
        private readonly ConnectionManager _connectionManager;
        private readonly List<NotificationChannel> _channels;
        private readonly NotificationsApi _notificationsApi;
        private readonly ILogger _logger;
        private readonly ILoggerFactory _loggerFactory;

        public Notifications(ConnectionManager connectionManager, ILoggerFactory loggerFactory) {
            _connectionManager = connectionManager;
            _channels = new List<NotificationChannel>();
            _notificationsApi = new NotificationsApi(_connectionManager, loggerFactory.CreateLogger<NotificationsApi>());
            _logger = loggerFactory.CreateLogger<Notifications>();
            _loggerFactory = loggerFactory;
        }
        public async Task<IEnumerable<AvailableTopic>?> GetAvailableTopics(IEnumerable<NotificationsApi.GetNotificationsAvailabletopicsExpandConstant>? expand = null) {
            var listing = await _notificationsApi.GetNotificationsAvailabletopics(expand);
            return listing?.Entities;
        }
        public async Task<NotificationChannel?> CreateChannel() {
            var channel = await _notificationsApi.PostNotificationsChannels();
            if (channel == null) {
                return null;
            }
            var notificationChannel = new NotificationChannel(_notificationsApi, channel, _loggerFactory.CreateLogger<NotificationChannel>());
            if (notificationChannel != null) {
                _channels.Add(notificationChannel);
            }
            return notificationChannel;
        }
        public async Task RemoveChannel(string channelId) {
            var channel = _channels.SingleOrDefault(p => p.Id == channelId);
            if (channel != null) {
                if (channel.HasSubscriptions) {
                    await channel.DeleteSubscription();
                }
                _channels.Remove(channel);
            }
        }
    }
}
